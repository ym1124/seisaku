//
// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
//
//
// Buffer Definitions: 
//
// cbuffer CAMERA_CONSTANTS
// {
//
//   struct CAMERA
//   {
//       
//       float4 eye;                    // Offset:    0
//       float4 dir;                    // Offset:   16
//       row_major float4x4 camera_view;// Offset:   32
//       row_major float4x4 camera_projection;// Offset:   96
//       row_major float4x4 camera_view_projection;// Offset:  160
//       row_major float4x4 inverse_camera_view;// Offset:  224
//       row_major float4x4 inverse_camera_projection;// Offset:  288
//       row_major float4x4 inverse_camera_view_projection;// Offset:  352
//
//   } camera;                          // Offset:    0 Size:   416
//
// }
//
// cbuffer CB_STEP02
// {
//
//   float radius;                      // Offset:    0 Size:     4
//   float bias;                        // Offset:    4 Size:     4
//   int kernelSize;                    // Offset:    8 Size:     4
//   float dummy;                       // Offset:   12 Size:     4 [unused]
//   float4 kernel[64];                 // Offset:   16 Size:  1024
//   float4 kernel_noise[16];           // Offset: 1040 Size:   256
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// default_sampler                   sampler      NA          NA    0        1
// world_tex                         texture  float4          2d    1        1
// normal_tex                        texture  float4          2d    2        1
// CB_STEP02                         cbuffer      NA          NA    2        1
// CAMERA_CONSTANTS                  cbuffer      NA          NA    4        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer cb4[10], immediateIndexed
dcl_constantbuffer cb2[81], dynamicIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 7
//
// Initial variable locations:
//   v0.x <- input.Position.x; v0.y <- input.Position.y; v0.z <- input.Position.z; v0.w <- input.Position.w; 
//   v1.x <- input.Tex.x; v1.y <- input.Tex.y; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 10 "D:\学習\C言語\2年授業\描画エンジン開発\?E人製?Eptr改造)prec"
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t1.xyzw, s0  // r0.x <- wPos.x; r0.y <- wPos.y; r0.z <- wPos.z; r0.w <- wPos.w
mul r1.xyz, r0.xxxx, cb4[2].xyzx
mul r2.xyz, r0.yyyy, cb4[3].xyzx
add r1.xyz, r1.xyzx, r2.xyzx
mul r0.xyz, r0.zzzz, cb4[4].xyzx
add r0.xyz, r0.xyzx, r1.xyzx
mul r1.xyz, r0.wwww, cb4[5].xyzx
add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vPos.x; r0.y <- vPos.y; r0.z <- vPos.z

#line 15
sample_indexable(texture2d)(float,float,float,float) r1.xyz, v1.xyxx, t2.xyzw, s0
mov r1.xyz, r1.xyzx  // r1.x <- normal_map.x; r1.y <- normal_map.y; r1.z <- normal_map.z
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r1.xyzx  // r1.x <- wNormal.x; r1.y <- wNormal.y; r1.z <- wNormal.z
mul r2.xyz, r1.xxxx, cb4[2].zxyz
mul r1.xyw, r1.yyyy, cb4[3].zxzy
add r1.xyw, r1.xyxw, r2.xyxz
mul r2.xyz, r1.zzzz, cb4[4].zxyz
add r1.xyz, r1.xywx, r2.xyzx  // r1.x <- vNormal.z; r1.y <- vNormal.x; r1.z <- vNormal.y
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r1.yzxy  // r1.x <- vNormal.x; r1.y <- vNormal.y; r1.z <- vNormal.z

#line 31
mul r0.w, v1.x, l(4.000000)
mul r1.w, v1.y, l(4.000000)
mul r0.w, r0.w, r1.w
ftoi r0.w, r0.w
mov r2.xyz, cb2[r0.w + 65].yzxy  // r2.x <- randomVec.y; r2.y <- randomVec.z; r2.z <- randomVec.x

#line 34
dp3 r0.w, r2.zxyz, r1.xyzx
mul r3.xyz, r0.wwww, r1.yzxy
mov r3.xyz, -r3.xyzx
add r2.xyz, r2.xyzx, r3.xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r2.xyzx  // r2.x <- tangent.y; r2.y <- tangent.z; r2.z <- tangent.x
mul r3.xyz, r1.yzxy, r2.yzxy
mul r4.xyz, r1.zxyz, r2.xyzx
mov r4.xyz, -r4.xyzx
add r3.xyz, r3.xyzx, r4.xyzx  // r3.x <- bitangent.x; r3.y <- bitangent.y; r3.z <- bitangent.z
mov r4.x, r2.z  // r4.x <- TBN._m00
mov r4.y, r3.x  // r4.y <- TBN._m10
mov r4.z, r1.x  // r4.z <- TBN._m20
mov r5.x, r2.x  // r5.x <- TBN._m01
mov r5.y, r3.y  // r5.y <- TBN._m11
mov r5.z, r1.y  // r5.z <- TBN._m21
mov r1.x, r2.y  // r1.x <- TBN._m02
mov r1.y, r3.z  // r1.y <- TBN._m12
mov r1.z, r1.z  // r1.z <- TBN._m22

#line 39
mov r0.w, l(0)  // r0.w <- occlusion
mov r1.w, l(0)  // r1.w <- i
mov r2.x, r0.w  // r2.x <- occlusion
mov r2.y, r1.w  // r2.y <- i
loop 
  ilt r2.z, r2.y, cb2[0].z
  breakc_z r2.z

#line 43
  dp3 r3.x, cb2[r2.y + 1].xyzx, r4.xyzx  // r3.x <- spos.x
  dp3 r3.y, cb2[r2.y + 1].xyzx, r5.xyzx  // r3.y <- spos.y
  dp3 r3.z, cb2[r2.y + 1].xyzx, r1.xyzx  // r3.z <- spos.z
  mul r3.xyz, r3.xyzx, cb2[0].xxxx
  add r3.xyz, r0.xyzx, r3.xyzx  // r3.x <- spos.x; r3.y <- spos.y; r3.z <- spos.z

#line 47
  mov r3.xyz, r3.xyzx  // r3.x <- offset.x; r3.y <- offset.y; r3.z <- offset.z
  mov r2.z, l(1.000000)  // r2.z <- offset.w
  mul r6.xyz, r3.xxxx, cb4[6].xywx
  mul r3.xyw, r3.yyyy, cb4[7].xyxw
  add r3.xyw, r3.xyxw, r6.xyxz
  mul r6.xyz, r3.zzzz, cb4[8].xywx
  add r3.xyw, r3.xyxw, r6.xyxz
  mul r6.xyz, r2.zzzz, cb4[9].xywx
  add r3.xyw, r3.xyxw, r6.xyxz  // r3.x <- offset.x; r3.y <- offset.y; r3.w <- offset.w
  div r2.zw, r3.xxxy, r3.wwww  // r2.z <- offset.x; r2.w <- offset.y
  mul r2.zw, r2.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000)
  add r6.xy, r2.zwzz, l(0.500000, 0.500000, 0.000000, 0.000000)  // r6.x <- offset.x; r6.y <- offset.y
  mov r2.z, -r6.y
  add r6.z, r2.z, l(1.000000)  // r6.z <- offset.y

#line 55
  sample_indexable(texture2d)(float,float,float,float) r3.xyw, r6.xzxx, t1.xywz, s0
  mov r3.xyw, r3.xyxw  // r3.x <- wPos_temp.x; r3.y <- wPos_temp.y; r3.w <- wPos_temp.z
  mov r2.z, l(1.000000)  // r2.z <- wPos_temp.w
  mul r2.w, r3.x, cb4[2].z
  mul r3.x, r3.y, cb4[3].z
  add r2.w, r2.w, r3.x
  mul r3.x, r3.w, cb4[4].z
  add r2.w, r2.w, r3.x
  mul r2.z, r2.z, cb4[5].z
  add r2.z, r2.z, r2.w  // r2.z <- sample_depth
  mov r2.w, -r2.z
  add r2.w, r0.z, r2.w
  mov r3.x, -r2.w
  max r2.w, r2.w, r3.x
  div r2.w, cb2[0].x, r2.w
  mov r3.x, l(-0.000000)
  add r3.y, r3.x, l(1.000000)
  add r2.w, r2.w, r3.x
  div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r3.y
  mul r2.w, r2.w, r3.x
  max r2.w, r2.w, l(0.000000)
  min r2.w, r2.w, l(1.000000)
  mul r3.x, r2.w, l(-2.000000)
  add r3.x, r3.x, l(3.000000)
  mul r2.w, r2.w, r2.w
  mul r2.w, r2.w, r3.x  // r2.w <- range_check
  add r3.x, r3.z, cb2[0].y
  ge r2.z, r3.x, r2.z
  movc r2.z, r2.z, l(1.000000), l(0)
  mul r2.z, r2.w, r2.z
  add r2.x, r2.z, r2.x
  iadd r2.y, r2.y, l(1)
endloop 
itof r0.x, cb2[0].z
div r0.x, r2.x, r0.x
mov r0.x, -r0.x
add r0.xyz, r0.xxxx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r0.z <- occlusion
mov r0.xyz, r0.xyzx  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z
mov r0.w, l(1.000000)  // r0.w <- color.w

#line 66
mov o0.xyzw, r0.xyzw
ret 
// Approximately 113 instruction slots used
