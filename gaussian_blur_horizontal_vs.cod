//
// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
//
//
// Buffer Definitions: 
//
// cbuffer CBBLUR
// {
//
//   float4 Weights0;                   // Offset:    0 Size:    16 [unused]
//   float4 Weights1;                   // Offset:   16 Size:    16 [unused]
//   float OffsetX;                     // Offset:   32 Size:     4 [unused]
//   float OffsetY;                     // Offset:   36 Size:     4 [unused]
//   float w;                           // Offset:   40 Size:     4
//   float h;                           // Offset:   44 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// CBBLUR                            cbuffer      NA          NA    2        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float       
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xy          2     NONE   float   xy  
// TEXCOORD                 3     zw        2     NONE   float     zw
// TEXCOORD                 4   xy          3     NONE   float   xy  
// TEXCOORD                 5     zw        3     NONE   float     zw
// TEXCOORD                 6   xy          4     NONE   float   xy  
// TEXCOORD                 7     zw        4     NONE   float     zw
//
vs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer cb2[3], immediateIndexed
dcl_input v0.xyz
dcl_input v2.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_output o1.zw
dcl_output o2.xy
dcl_output o2.zw
dcl_output o3.xy
dcl_output o3.zw
dcl_output o4.xy
dcl_output o4.zw
dcl_temps 5
//
// Initial variable locations:
//   v0.x <- input.Position.x; v0.y <- input.Position.y; v0.z <- input.Position.z; 
//   v1.x <- input.Normal.x; v1.y <- input.Normal.y; v1.z <- input.Normal.z; 
//   v2.x <- input.TexCoord.x; v2.y <- input.TexCoord.y; 
//   o4.x <- <main return value>.TexCoord6.x; o4.y <- <main return value>.TexCoord6.y; o4.z <- <main return value>.TexCoord7.x; o4.w <- <main return value>.TexCoord7.y; 
//   o3.x <- <main return value>.TexCoord4.x; o3.y <- <main return value>.TexCoord4.y; o3.z <- <main return value>.TexCoord5.x; o3.w <- <main return value>.TexCoord5.y; 
//   o2.x <- <main return value>.TexCoord2.x; o2.y <- <main return value>.TexCoord2.y; o2.z <- <main return value>.TexCoord3.x; o2.w <- <main return value>.TexCoord3.y; 
//   o1.x <- <main return value>.TexCoord0.x; o1.y <- <main return value>.TexCoord0.y; o1.z <- <main return value>.TexCoord1.x; o1.w <- <main return value>.TexCoord1.y; 
//   o0.x <- <main return value>.Position.x; o0.y <- <main return value>.Position.y; o0.z <- <main return value>.Position.z; o0.w <- <main return value>.Position.w
//
#line 8 "D:\学習\C言語\2年授業\描画エンジン開発\?E人製?Eptr改造)precompile\gaussian_blur"
mov r0.xyz, v0.xyzx  // r0.x <- output.Position.x; r0.y <- output.Position.y; r0.z <- output.Position.z
mov r0.w, l(1.000000)  // r0.w <- output.Position.w
div r1.x, l(-1.000000), cb2[2].z
mov r1.y, l(0)
add r1.xy, r1.xyxx, v2.xyxx  // r1.x <- output.TexCoord0.x; r1.y <- output.TexCoord0.y
div r1.z, l(-3.000000), cb2[2].z
mov r1.w, l(0)
add r1.zw, r1.zzzw, v2.xxxy  // r1.z <- output.TexCoord1.x; r1.w <- output.TexCoord1.y
div r2.x, l(-5.000000), cb2[2].z
mov r2.y, l(0)
add r2.xy, r2.xyxx, v2.xyxx  // r2.x <- output.TexCoord2.x; r2.y <- output.TexCoord2.y
div r2.z, l(-7.000000), cb2[2].z
mov r2.w, l(0)
add r2.zw, r2.zzzw, v2.xxxy  // r2.z <- output.TexCoord3.x; r2.w <- output.TexCoord3.y
div r3.x, l(-9.000000), cb2[2].z
mov r3.y, l(0)
add r3.xy, r3.xyxx, v2.xyxx  // r3.x <- output.TexCoord4.x; r3.y <- output.TexCoord4.y
div r3.z, l(-11.000000), cb2[2].z
mov r3.w, l(0)
add r3.zw, r3.zzzw, v2.xxxy  // r3.z <- output.TexCoord5.x; r3.w <- output.TexCoord5.y
div r4.x, l(-13.000000), cb2[2].z
mov r4.y, l(0)
add r4.xy, r4.xyxx, v2.xyxx  // r4.x <- output.TexCoord6.x; r4.y <- output.TexCoord6.y
div r4.z, l(-15.000000), cb2[2].z
mov r4.w, l(0)
add r4.zw, r4.zzzw, v2.xxxy  // r4.z <- output.TexCoord7.x; r4.w <- output.TexCoord7.y

#line 19
mov o0.xyzw, r0.xyzw
mov o1.xy, r1.xyxx
mov o1.zw, r1.zzzw
mov o2.xy, r2.xyxx
mov o2.zw, r2.zzzw
mov o3.xy, r3.xyxx
mov o3.zw, r3.zzzw
mov o4.xy, r4.xyxx
mov o4.zw, r4.zzzw
ret 
// Approximately 36 instruction slots used
