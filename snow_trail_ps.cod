//
// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// default_sampler                   sampler      NA          NA    0        1
// now_tex                           texture  float4          2d    0        1
// pre_tex                           texture  float4          2d    1        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 2
//
// Initial variable locations:
//   v0.x <- input.Position.x; v0.y <- input.Position.y; v0.z <- input.Position.z; v0.w <- input.Position.w; 
//   v1.x <- input.Tex.x; v1.y <- input.Tex.y; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 5 "D:\学習\C言語\2年授業\描画エンジン開発\?E人製?Eptr改造)precompile"
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t1.xyzw, s0  // r0.x <- pre_color.x; r0.y <- pre_color.y; r0.z <- pre_color.z; r0.w <- pre_color.w
lt r1.x, r0.x, l(1.000000)
if_nz r1.x
  add r0.x, r0.x, l(0.003000)
endif 
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v1.xyxx, t0.xyzw, s0  // r1.x <- now_color.x; r1.y <- now_color.y; r1.z <- now_color.z; r1.w <- now_color.w
mul r0.xyzw, r0.xyzw, r1.xyzw  // r0.x <- result_color.x; r0.y <- result_color.y; r0.z <- result_color.z; r0.w <- result_color.w
mov o0.xyzw, r0.xyzw
ret 
// Approximately 9 instruction slots used
