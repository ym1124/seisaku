//
// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
//
//
//
// Patch Constant signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TessFactor            0   x           0  TRIEDGE   float       
// SV_TessFactor            1   x           1  TRIEDGE   float       
// SV_TessFactor            2   x           2  TRIEDGE   float       
// SV_InsideTessFactor      0   x           3   TRIINT   float       
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
//
// Tessellation Domain   # of control points
// -------------------- --------------------
// Triangle                                3
//
ds_5_0
dcl_input_control_point_count 3
dcl_tessellator_domain domain_tri
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_input vDomain.xyz
dcl_input vicp[3][0].xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_temps 4
//
// Initial variable locations:
//   vpc3.x <- input.InsideTessFactor; 
//   vpc0.x <- input.EdgeTessFactor[0]; 
//   vpc1.x <- input.EdgeTessFactor[1]; 
//   vpc2.x <- input.EdgeTessFactor[2]; 
//   vDomain.x <- domain.x; vDomain.y <- domain.y; vDomain.z <- domain.z; 
//   o1.x <- <main return value>.color.x; o1.y <- <main return value>.color.y; o1.z <- <main return value>.color.z; o1.w <- <main return value>.color.w; 
//   o0.x <- <main return value>.pos.x; o0.y <- <main return value>.pos.y; o0.z <- <main return value>.pos.z; o0.w <- <main return value>.pos.w; 
//   vicp[0][0].x <- patch[0].pos.x; vicp[0][0].y <- patch[0].pos.y; vicp[0][0].z <- patch[0].pos.z; 
//   vicp[1][0].x <- patch[1].pos.x; vicp[1][0].y <- patch[1].pos.y; vicp[1][0].z <- patch[1].pos.z; 
//   vicp[2][0].x <- patch[2].pos.x; vicp[2][0].y <- patch[2].pos.y; vicp[2][0].z <- patch[2].pos.z
//
#line 35 "D:\学習\C言語\2年授業\描画エンジン開発\?E人製作リファクタリング\?E人製作リファクタリング\?E"
mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
add r0.xyz, r0.xyzx, r1.xyzx
mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- output.pos.x; r0.y <- output.pos.y; r0.z <- output.pos.z
itof r0.w, l(1)  // r0.w <- output.pos.w
nop 
mov r1.xyz, vDomain.xyzx

#line 16
itof r2.w, l(1)  // r2.w <- color.w
itof r1.w, l(0x0756b5b3)
mul r1.x, r1.w, r1.x
itof r1.w, l(0x1b34f908)
mul r1.y, r1.w, r1.y
add r1.x, r1.y, r1.x
itof r1.y, l(0x2f133c5d)
mul r1.y, r1.y, r1.z
add r1.x, r1.y, r1.x
ftou r1.x, r1.x  // r1.x <- rnd_seed
nop 
mov r1.x, r1.x
mov r1.y, l(3)
ishl r1.y, r1.x, r1.y

#line 5
mov r1.x, r1.x  // r1.x <- v.x
mov r1.y, r1.y  // r1.y <- v.y
mov r1.z, l(-0.000000)  // r1.z <- s
ishl r1.w, r1.y, l(4)
iadd r1.w, r1.w, l(0xa341316c)
iadd r3.x, r1.z, r1.y
xor r1.w, r1.w, r3.x
ushr r3.x, r1.y, l(5)
iadd r3.x, r3.x, l(0xc8013ea4)
xor r1.w, r1.w, r3.x
iadd r1.x, r1.w, r1.x
ishl r1.w, r1.x, l(4)
iadd r1.w, r1.w, l(0xad90777d)
iadd r3.x, r1.z, r1.x
xor r1.w, r1.w, r3.x
ushr r3.x, r1.x, l(5)
iadd r3.x, r3.x, l(0x7e95761e)
xor r1.w, r1.w, r3.x
iadd r1.y, r1.w, r1.y
iadd r1.z, r1.z, l(0x9e3779b9)
ishl r1.w, r1.y, l(4)
iadd r1.w, r1.w, l(0xa341316c)
iadd r3.x, r1.z, r1.y
xor r1.w, r1.w, r3.x
ushr r3.x, r1.y, l(5)
iadd r3.x, r3.x, l(0xc8013ea4)
xor r1.w, r1.w, r3.x
iadd r1.x, r1.w, r1.x
ishl r1.w, r1.x, l(4)
iadd r1.w, r1.w, l(0xad90777d)
iadd r3.x, r1.z, r1.x
xor r1.w, r1.w, r3.x
ushr r3.x, r1.x, l(5)
iadd r3.x, r3.x, l(0x7e95761e)
xor r1.w, r1.w, r3.x
iadd r1.y, r1.w, r1.y
iadd r1.z, r1.z, l(0x9e3779b9)
ishl r1.w, r1.y, l(4)
iadd r1.w, r1.w, l(0xa341316c)
iadd r3.x, r1.z, r1.y
xor r1.w, r1.w, r3.x
ushr r3.x, r1.y, l(5)
iadd r3.x, r3.x, l(0xc8013ea4)
xor r1.w, r1.w, r3.x
iadd r1.x, r1.w, r1.x
ishl r1.w, r1.x, l(4)
iadd r1.w, r1.w, l(0xad90777d)
iadd r3.x, r1.z, r1.x
xor r1.w, r1.w, r3.x
ushr r3.x, r1.x, l(5)
iadd r3.x, r3.x, l(0x7e95761e)
xor r1.w, r1.w, r3.x
iadd r1.y, r1.w, r1.y
iadd r1.z, r1.z, l(0x9e3779b9)
ishl r1.w, r1.y, l(4)
iadd r1.w, r1.w, l(0xa341316c)
iadd r3.x, r1.z, r1.y
xor r1.w, r1.w, r3.x
ushr r3.x, r1.y, l(5)
iadd r3.x, r3.x, l(0xc8013ea4)
xor r1.w, r1.w, r3.x
iadd r1.x, r1.w, r1.x
ishl r1.w, r1.x, l(4)
iadd r1.w, r1.w, l(0xad90777d)
iadd r3.x, r1.z, r1.x
xor r1.w, r1.w, r3.x
ushr r3.x, r1.x, l(5)
iadd r3.x, r3.x, l(0x7e95761e)
xor r1.w, r1.w, r3.x
iadd r1.y, r1.w, r1.y
iadd r1.z, r1.z, l(0x9e3779b9)
ishl r1.w, r1.y, l(4)
iadd r1.w, r1.w, l(0xa341316c)
iadd r3.x, r1.z, r1.y
xor r1.w, r1.w, r3.x
ushr r3.x, r1.y, l(5)
iadd r3.x, r3.x, l(0xc8013ea4)
xor r1.w, r1.w, r3.x
iadd r1.x, r1.w, r1.x
ishl r3.x, r1.x, l(4)
iadd r3.x, r3.x, l(0xad90777d)
iadd r1.z, r1.z, r1.x
xor r1.z, r1.z, r3.x
ushr r3.x, r1.x, l(5)
iadd r3.x, r3.x, l(0x7e95761e)
xor r1.z, r1.z, r3.x
iadd r1.w, r1.z, r1.y  // r1.w <- v.y

#line 12
mov r1.x, r1.x  // r1.x <- <random return value>.x
mov r1.w, r1.w  // r1.w <- <random return value>.y

#line 18
mov r1.xw, r1.xxxw  // r1.x <- r.x; r1.w <- r.y
nop 
mov r1.x, r1.x
mov r1.w, r1.w

#line 5
mov r1.x, r1.x
mov r1.w, r1.w
mov r1.y, l(-0.000000)  // r1.y <- s
ishl r1.z, r1.w, l(4)
iadd r1.z, r1.z, l(0xa341316c)
iadd r3.x, r1.y, r1.w
xor r1.z, r1.z, r3.x
ushr r3.x, r1.w, l(5)
iadd r3.x, r3.x, l(0xc8013ea4)
xor r1.z, r1.z, r3.x
iadd r1.x, r1.z, r1.x
ishl r1.z, r1.x, l(4)
iadd r1.z, r1.z, l(0xad90777d)
iadd r3.x, r1.y, r1.x
xor r1.z, r1.z, r3.x
ushr r3.x, r1.x, l(5)
iadd r3.x, r3.x, l(0x7e95761e)
xor r1.z, r1.z, r3.x
iadd r1.z, r1.z, r1.w  // r1.z <- v.y
iadd r1.y, r1.y, l(0x9e3779b9)
ishl r1.w, r1.z, l(4)
iadd r1.w, r1.w, l(0xa341316c)
iadd r3.x, r1.y, r1.z
xor r1.w, r1.w, r3.x
ushr r3.x, r1.z, l(5)
iadd r3.x, r3.x, l(0xc8013ea4)
xor r1.w, r1.w, r3.x
iadd r1.x, r1.w, r1.x
ishl r1.w, r1.x, l(4)
iadd r1.w, r1.w, l(0xad90777d)
iadd r3.x, r1.y, r1.x
xor r1.w, r1.w, r3.x
ushr r3.x, r1.x, l(5)
iadd r3.x, r3.x, l(0x7e95761e)
xor r1.w, r1.w, r3.x
iadd r1.z, r1.w, r1.z
iadd r1.y, r1.y, l(0x9e3779b9)
ishl r1.w, r1.z, l(4)
iadd r1.w, r1.w, l(0xa341316c)
iadd r3.x, r1.y, r1.z
xor r1.w, r1.w, r3.x
ushr r3.x, r1.z, l(5)
iadd r3.x, r3.x, l(0xc8013ea4)
xor r1.w, r1.w, r3.x
iadd r1.x, r1.w, r1.x
ishl r1.w, r1.x, l(4)
iadd r1.w, r1.w, l(0xad90777d)
iadd r3.x, r1.y, r1.x
xor r1.w, r1.w, r3.x
ushr r3.x, r1.x, l(5)
iadd r3.x, r3.x, l(0x7e95761e)
xor r1.w, r1.w, r3.x
iadd r1.z, r1.w, r1.z
iadd r1.y, r1.y, l(0x9e3779b9)
ishl r1.w, r1.z, l(4)
iadd r1.w, r1.w, l(0xa341316c)
iadd r3.x, r1.y, r1.z
xor r1.w, r1.w, r3.x
ushr r3.x, r1.z, l(5)
iadd r3.x, r3.x, l(0xc8013ea4)
xor r1.w, r1.w, r3.x
iadd r1.x, r1.w, r1.x
ishl r1.w, r1.x, l(4)
iadd r1.w, r1.w, l(0xad90777d)
iadd r3.x, r1.y, r1.x
xor r1.w, r1.w, r3.x
ushr r3.x, r1.x, l(5)
iadd r3.x, r3.x, l(0x7e95761e)
xor r1.w, r1.w, r3.x
iadd r1.z, r1.w, r1.z
iadd r1.y, r1.y, l(0x9e3779b9)
ishl r1.w, r1.z, l(4)
iadd r1.w, r1.w, l(0xa341316c)
iadd r3.x, r1.y, r1.z
xor r1.w, r1.w, r3.x
ushr r3.x, r1.z, l(5)
iadd r3.x, r3.x, l(0xc8013ea4)
xor r1.w, r1.w, r3.x
iadd r1.x, r1.w, r1.x
ishl r3.x, r1.x, l(4)
iadd r3.x, r3.x, l(0xad90777d)
iadd r1.y, r1.y, r1.x
xor r1.y, r1.y, r3.x
ushr r3.x, r1.x, l(5)
iadd r3.x, r3.x, l(0x7e95761e)
xor r1.y, r1.y, r3.x
iadd r1.w, r1.y, r1.z  // r1.w <- v.y

#line 12
mov r1.x, r1.x
mov r1.w, r1.w  // r1.w <- <random return value>.y

#line 19
mov r1.xw, r1.xxxw  // r1.w <- r.y
utof r1.y, r1.x
utof r1.z, l(-1)
div r2.x, r1.y, r1.z  // r2.x <- color.x
nop 
mov r1.x, r1.x
mov r1.w, r1.w

#line 5
mov r1.x, r1.x
mov r1.w, r1.w
mov r1.y, l(-0.000000)  // r1.y <- s
ishl r1.z, r1.w, l(4)
iadd r1.z, r1.z, l(0xa341316c)
iadd r3.x, r1.y, r1.w
xor r1.z, r1.z, r3.x
ushr r3.x, r1.w, l(5)
iadd r3.x, r3.x, l(0xc8013ea4)
xor r1.z, r1.z, r3.x
iadd r1.x, r1.z, r1.x
ishl r1.z, r1.x, l(4)
iadd r1.z, r1.z, l(0xad90777d)
iadd r3.x, r1.y, r1.x
xor r1.z, r1.z, r3.x
ushr r3.x, r1.x, l(5)
iadd r3.x, r3.x, l(0x7e95761e)
xor r1.z, r1.z, r3.x
iadd r1.z, r1.z, r1.w  // r1.z <- v.y
iadd r1.y, r1.y, l(0x9e3779b9)
ishl r1.w, r1.z, l(4)
iadd r1.w, r1.w, l(0xa341316c)
iadd r3.x, r1.y, r1.z
xor r1.w, r1.w, r3.x
ushr r3.x, r1.z, l(5)
iadd r3.x, r3.x, l(0xc8013ea4)
xor r1.w, r1.w, r3.x
iadd r1.x, r1.w, r1.x
ishl r1.w, r1.x, l(4)
iadd r1.w, r1.w, l(0xad90777d)
iadd r3.x, r1.y, r1.x
xor r1.w, r1.w, r3.x
ushr r3.x, r1.x, l(5)
iadd r3.x, r3.x, l(0x7e95761e)
xor r1.w, r1.w, r3.x
iadd r1.z, r1.w, r1.z
iadd r1.y, r1.y, l(0x9e3779b9)
ishl r1.w, r1.z, l(4)
iadd r1.w, r1.w, l(0xa341316c)
iadd r3.x, r1.y, r1.z
xor r1.w, r1.w, r3.x
ushr r3.x, r1.z, l(5)
iadd r3.x, r3.x, l(0xc8013ea4)
xor r1.w, r1.w, r3.x
iadd r1.x, r1.w, r1.x
ishl r1.w, r1.x, l(4)
iadd r1.w, r1.w, l(0xad90777d)
iadd r3.x, r1.y, r1.x
xor r1.w, r1.w, r3.x
ushr r3.x, r1.x, l(5)
iadd r3.x, r3.x, l(0x7e95761e)
xor r1.w, r1.w, r3.x
iadd r1.z, r1.w, r1.z
iadd r1.y, r1.y, l(0x9e3779b9)
ishl r1.w, r1.z, l(4)
iadd r1.w, r1.w, l(0xa341316c)
iadd r3.x, r1.y, r1.z
xor r1.w, r1.w, r3.x
ushr r3.x, r1.z, l(5)
iadd r3.x, r3.x, l(0xc8013ea4)
xor r1.w, r1.w, r3.x
iadd r1.x, r1.w, r1.x
ishl r1.w, r1.x, l(4)
iadd r1.w, r1.w, l(0xad90777d)
iadd r3.x, r1.y, r1.x
xor r1.w, r1.w, r3.x
ushr r3.x, r1.x, l(5)
iadd r3.x, r3.x, l(0x7e95761e)
xor r1.w, r1.w, r3.x
iadd r1.z, r1.w, r1.z
iadd r1.y, r1.y, l(0x9e3779b9)
ishl r1.w, r1.z, l(4)
iadd r1.w, r1.w, l(0xa341316c)
iadd r3.x, r1.y, r1.z
xor r1.w, r1.w, r3.x
ushr r3.x, r1.z, l(5)
iadd r3.x, r3.x, l(0xc8013ea4)
xor r1.w, r1.w, r3.x
iadd r1.x, r1.w, r1.x
ishl r3.x, r1.x, l(4)
iadd r3.x, r3.x, l(0xad90777d)
iadd r1.y, r1.y, r1.x
xor r1.y, r1.y, r3.x
ushr r3.x, r1.x, l(5)
iadd r3.x, r3.x, l(0x7e95761e)
xor r1.y, r1.y, r3.x
iadd r1.w, r1.y, r1.z  // r1.w <- v.y

#line 12
mov r1.x, r1.x
mov r1.w, r1.w  // r1.w <- <random return value>.y

#line 21
mov r1.xw, r1.xxxw  // r1.w <- r.y
utof r1.y, r1.x
utof r1.z, l(-1)
div r2.y, r1.y, r1.z  // r2.y <- color.y
nop 
mov r1.x, r1.x
mov r1.w, r1.w

#line 5
mov r1.x, r1.x
mov r1.w, r1.w
mov r1.y, l(-0.000000)  // r1.y <- s
ishl r1.z, r1.w, l(4)
iadd r1.z, r1.z, l(0xa341316c)
iadd r3.x, r1.y, r1.w
xor r1.z, r1.z, r3.x
ushr r3.x, r1.w, l(5)
iadd r3.x, r3.x, l(0xc8013ea4)
xor r1.z, r1.z, r3.x
iadd r1.x, r1.z, r1.x
ishl r1.z, r1.x, l(4)
iadd r1.z, r1.z, l(0xad90777d)
iadd r3.x, r1.y, r1.x
xor r1.z, r1.z, r3.x
ushr r3.x, r1.x, l(5)
iadd r3.x, r3.x, l(0x7e95761e)
xor r1.z, r1.z, r3.x
iadd r1.z, r1.z, r1.w  // r1.z <- v.y
iadd r1.y, r1.y, l(0x9e3779b9)
ishl r1.w, r1.z, l(4)
iadd r1.w, r1.w, l(0xa341316c)
iadd r3.x, r1.y, r1.z
xor r1.w, r1.w, r3.x
ushr r3.x, r1.z, l(5)
iadd r3.x, r3.x, l(0xc8013ea4)
xor r1.w, r1.w, r3.x
iadd r1.x, r1.w, r1.x
ishl r1.w, r1.x, l(4)
iadd r1.w, r1.w, l(0xad90777d)
iadd r3.x, r1.y, r1.x
xor r1.w, r1.w, r3.x
ushr r3.x, r1.x, l(5)
iadd r3.x, r3.x, l(0x7e95761e)
xor r1.w, r1.w, r3.x
iadd r1.z, r1.w, r1.z
iadd r1.y, r1.y, l(0x9e3779b9)
ishl r1.w, r1.z, l(4)
iadd r1.w, r1.w, l(0xa341316c)
iadd r3.x, r1.y, r1.z
xor r1.w, r1.w, r3.x
ushr r3.x, r1.z, l(5)
iadd r3.x, r3.x, l(0xc8013ea4)
xor r1.w, r1.w, r3.x
iadd r1.x, r1.w, r1.x
ishl r1.w, r1.x, l(4)
iadd r1.w, r1.w, l(0xad90777d)
iadd r3.x, r1.y, r1.x
xor r1.w, r1.w, r3.x
ushr r3.x, r1.x, l(5)
iadd r3.x, r3.x, l(0x7e95761e)
xor r1.w, r1.w, r3.x
iadd r1.z, r1.w, r1.z
iadd r1.y, r1.y, l(0x9e3779b9)
ishl r1.w, r1.z, l(4)
iadd r1.w, r1.w, l(0xa341316c)
iadd r3.x, r1.y, r1.z
xor r1.w, r1.w, r3.x
ushr r3.x, r1.z, l(5)
iadd r3.x, r3.x, l(0xc8013ea4)
xor r1.w, r1.w, r3.x
iadd r1.x, r1.w, r1.x
ishl r1.w, r1.x, l(4)
iadd r1.w, r1.w, l(0xad90777d)
iadd r3.x, r1.y, r1.x
xor r1.w, r1.w, r3.x
ushr r3.x, r1.x, l(5)
iadd r3.x, r3.x, l(0x7e95761e)
xor r1.w, r1.w, r3.x
iadd r1.z, r1.w, r1.z
iadd r1.y, r1.y, l(0x9e3779b9)
ishl r1.w, r1.z, l(4)
iadd r1.w, r1.w, l(0xa341316c)
iadd r1.y, r1.y, r1.z
xor r1.y, r1.y, r1.w
ushr r1.z, r1.z, l(5)
iadd r1.z, r1.z, l(0xc8013ea4)
xor r1.y, r1.z, r1.y
iadd r1.x, r1.y, r1.x

#line 12
mov r1.x, r1.x

#line 23
mov r1.x, r1.x
utof r1.x, r1.x
utof r1.y, l(-1)
div r2.z, r1.x, r1.y  // r2.z <- color.z
mov r2.x, r2.x  // r2.x <- <calColor return value>.x
mov r2.y, r2.y  // r2.y <- <calColor return value>.y
mov r2.z, r2.z  // r2.z <- <calColor return value>.z
mov r2.w, r2.w  // r2.w <- <calColor return value>.w

#line 36
mov r2.xyzw, r2.xyzw  // r2.x <- output.color.x; r2.y <- output.color.y; r2.z <- output.color.z; r2.w <- output.color.w
mov o0.xyzw, r0.xyzw
mov o1.xyzw, r2.xyzw
ret 
// Approximately 399 instruction slots used
