//
// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
//
//
// Buffer Definitions: 
//
// cbuffer CONSTANT_BUFFER
// {
//
//   row_major float4x4 world_view_projection;// Offset:    0 Size:    64
//   row_major float4x4 world;          // Offset:   64 Size:    64 [unused]
//   float4 material_color;             // Offset:  128 Size:    16
//   float4 light_direction;            // Offset:  144 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// CONSTANT_BUFFER                   cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyzw        1     NONE   float   xyzw
// TANGENT                  0   xyz         2     NONE   float       
// BITANGENT                0   xyz         3     NONE   float       
// TEXCOORD                 0   xy          4     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
// NORMAL                   0   xyzw        3     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer cb0[10], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xyzw
dcl_input v4.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xy
dcl_output o3.xyzw
dcl_temps 4
//
// Initial variable locations:
//   v0.x <- position.x; v0.y <- position.y; v0.z <- position.z; v0.w <- position.w; 
//   v1.x <- normal.x; v1.y <- normal.y; v1.z <- normal.z; v1.w <- normal.w; 
//   v2.x <- tangent.x; v2.y <- tangent.y; v2.z <- tangent.z; 
//   v3.x <- bitangent.x; v3.y <- bitangent.y; v3.z <- bitangent.z; 
//   v4.x <- texcoord.x; v4.y <- texcoord.y; 
//   o3.x <- <main return value>.normal.x; o3.y <- <main return value>.normal.y; o3.z <- <main return value>.normal.z; o3.w <- <main return value>.normal.w; 
//   o2.x <- <main return value>.texcoord.x; o2.y <- <main return value>.texcoord.y; 
//   o1.x <- <main return value>.color.x; o1.y <- <main return value>.color.y; o1.z <- <main return value>.color.z; o1.w <- <main return value>.color.w; 
//   o0.x <- <main return value>.position.x; o0.y <- <main return value>.position.y; o0.z <- <main return value>.position.z; o0.w <- <main return value>.position.w
//
#line 7 "D:\学習\C言語\2年授業\描画エンジン開発\?E人製?Eptr改造)precompile\static_m"
mul r0.xyzw, v0.xxxx, cb0[0].xyzw
mul r1.xyzw, v0.yyyy, cb0[1].xyzw
add r0.xyzw, r0.xyzw, r1.xyzw
mul r1.xyzw, v0.zzzz, cb0[2].xyzw
add r0.xyzw, r0.xyzw, r1.xyzw
mul r1.xyzw, v0.wwww, cb0[3].xyzw
add r0.xyzw, r0.xyzw, r1.xyzw  // r0.x <- vout.position.x; r0.y <- vout.position.y; r0.z <- vout.position.z; r0.w <- vout.position.w
mul r1.xyzw, v1.xxxx, cb0[0].xyzw
mul r2.xyzw, v1.yyyy, cb0[1].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
mul r2.xyzw, v1.zzzz, cb0[2].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
mul r2.xyzw, v1.wwww, cb0[3].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
dp4 r2.x, r1.xyzw, r1.xyzw
rsq r2.x, r2.x
mul r1.xyzw, r1.xyzw, r2.xxxx  // r1.x <- N.x; r1.y <- N.y; r1.z <- N.z; r1.w <- N.w
dp4 r2.x, cb0[9].xyzw, cb0[9].xyzw
rsq r2.x, r2.x
mul r2.xyzw, r2.xxxx, cb0[9].xyzw  // r2.x <- L.x; r2.y <- L.y; r2.z <- L.z; r2.w <- L.w
itof r3.x, l(0)
dp4 r2.x, r2.xyzw, r1.xyzw
max r2.x, r2.x, r3.x
mul r2.xyz, r2.xxxx, cb0[8].xyzx  // r2.x <- vout.color.x; r2.y <- vout.color.y; r2.z <- vout.color.z
mov r2.w, cb0[8].w  // r2.w <- vout.color.w
mov r3.xy, v4.xyxx  // r3.x <- vout.texcoord.x; r3.y <- vout.texcoord.y
mov r1.xyzw, r1.xyzw  // r1.x <- vout.normal.x; r1.y <- vout.normal.y; r1.z <- vout.normal.z; r1.w <- vout.normal.w
mov o0.xyzw, r0.xyzw
mov o1.xyz, r2.xyzx
mov o1.w, r2.w
mov o3.xyzw, r1.xyzw
mov o2.xy, r3.xyxx
ret 
// Approximately 33 instruction slots used
