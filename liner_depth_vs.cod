//
// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
//
//
// Buffer Definitions: 
//
// cbuffer CAMERA_CONSTANTS
// {
//
//   struct CAMERA
//   {
//       
//       float4 eye;                    // Offset:    0
//       float4 dir;                    // Offset:   16
//       row_major float4x4 camera_view;// Offset:   32
//       row_major float4x4 camera_projection;// Offset:   96
//       row_major float4x4 camera_view_projection;// Offset:  160
//       row_major float4x4 inverse_camera_view;// Offset:  224
//       row_major float4x4 inverse_camera_projection;// Offset:  288
//       row_major float4x4 inverse_camera_view_projection;// Offset:  352
//
//   } camera;                          // Offset:    0 Size:   416
//
// }
//
// cbuffer CBPerMesh
// {
//
//   row_major float4x4 World;          // Offset:    0 Size:    64
//   row_major float4x4 matWVP;         // Offset:   64 Size:    64 [unused]
//
// }
//
// cbuffer CB
// {
//
//   row_major float4x4 custom_projection;// Offset:    0 Size:    64
//   float farZ;                        // Offset:   64 Size:     4
//   float nearZ;                       // Offset:   68 Size:     4
//   float2 dummy;                      // Offset:   72 Size:     8 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// CBPerMesh                         cbuffer      NA          NA    0        1
// CB                                cbuffer      NA          NA    2        1
// CAMERA_CONSTANTS                  cbuffer      NA          NA    4        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float       
// TEXCOORD                 0   xy          2     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// POSITION                 0   xyzw        1     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer cb4[10], immediateIndexed
dcl_constantbuffer cb0[4], immediateIndexed
dcl_constantbuffer cb2[5], immediateIndexed
dcl_input v0.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_temps 4
//
// Initial variable locations:
//   v0.x <- input.Position.x; v0.y <- input.Position.y; v0.z <- input.Position.z; 
//   v1.x <- input.Normal.x; v1.y <- input.Normal.y; v1.z <- input.Normal.z; 
//   v2.x <- input.Tex.x; v2.y <- input.Tex.y; 
//   o1.x <- <main return value>.Position2.x; o1.y <- <main return value>.Position2.y; o1.z <- <main return value>.Position2.z; o1.w <- <main return value>.Position2.w; 
//   o0.x <- <main return value>.Position.x; o0.y <- <main return value>.Position.y; o0.z <- <main return value>.Position.z; o0.w <- <main return value>.Position.w
//
#line 12 "D:\学習\C言語\2年授業\描画エンジン開発\?E人製?Eptr改造)precompile\"
mov r0.xyz, v0.xyzx  // r0.x <- p.x; r0.y <- p.y; r0.z <- p.z
mov r0.w, l(1.000000)  // r0.w <- p.w
mul r1.xyzw, r0.xxxx, cb0[0].xyzw
mul r2.xyzw, r0.yyyy, cb0[1].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
mul r2.xyzw, r0.zzzz, cb0[2].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
mul r0.xyzw, r0.wwww, cb0[3].xyzw
add r0.xyzw, r0.xyzw, r1.xyzw  // r0.x <- p.x; r0.y <- p.y; r0.z <- p.z; r0.w <- p.w
mul r1.xyzw, r0.xxxx, cb4[2].xyzw
mul r2.xyzw, r0.yyyy, cb4[3].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
mul r2.xyzw, r0.zzzz, cb4[4].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
mul r0.xyzw, r0.wwww, cb4[5].xyzw
add r0.xyzw, r0.xyzw, r1.xyzw  // r0.x <- p.x; r0.y <- p.y; r0.z <- p.z; r0.w <- p.w
mul r1.xyzw, r0.xxxx, cb2[0].xyzw
mul r2.xyzw, r0.yyyy, cb2[1].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
mul r2.xyzw, r0.zzzz, cb2[2].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
mul r2.xyzw, r0.wwww, cb2[3].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw  // r1.x <- cp.x; r1.y <- cp.y; r1.z <- cp.z; r1.w <- cp.w
mul r2.xyzw, r0.xxxx, cb4[6].xyzw
mul r3.xyzw, r0.yyyy, cb4[7].xyzw
add r2.xyzw, r2.xyzw, r3.xyzw
mul r3.xyzw, r0.zzzz, cb4[8].xyzw
add r2.xyzw, r2.xyzw, r3.xyzw
mul r0.xyzw, r0.wwww, cb4[9].xyzw
add r0.xyzw, r0.xyzw, r2.xyzw  // r0.x <- p.x; r0.y <- p.y; r0.z <- p.z; r0.w <- p.w
mov r0.xyzw, r0.xyzw  // r0.x <- output.Position.x; r0.y <- output.Position.y; r0.z <- output.Position.z; r0.w <- output.Position.w
mov r2.x, -cb2[4].y
add r2.x, r1.z, r2.x
mov r2.y, -cb2[4].y
add r2.y, r2.y, cb2[4].x
div r2.x, r2.x, r2.y  // r2.x <- cp.z
mul r1.z, r1.w, r2.x  // r1.z <- cp.z
mov r1.xyw, r1.xyxw  // r1.x <- output.Position2.x; r1.y <- output.Position2.y; r1.w <- output.Position2.w
mov r1.z, r1.z  // r1.z <- output.Position2.z

#line 23
mov o0.xyzw, r0.xyzw
mov o1.xyzw, r1.xyzw
ret 
// Approximately 42 instruction slots used
