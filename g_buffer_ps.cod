//
// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// DecalSampler                      sampler      NA          NA    0        1
// DiffuseTexture                    texture  float4          2d    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float     z 
// TEXCOORD                 4   xyz         1     NONE   float       
// TEXCOORD                 0   xy          2     NONE   float   xy  
// COLOR                    0   xyzw        3     NONE   float       
// TEXCOORD                 1   xyz         4     NONE   float   xyz 
// TEXCOORD                 2   xyz         5     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
// SV_TARGET                1   xyzw        1   TARGET   float   xyzw
// SV_TARGET                2   xyzw        2   TARGET   float   xyzw
// SV_TARGET                3   xyzw        3   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps_siv linear noperspective v0.z, position
dcl_input_ps linear v2.xy
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_temps 4
//
// Initial variable locations:
//   v0.x <- input.Position.x; v0.y <- input.Position.y; v0.z <- input.Position.z; v0.w <- input.Position.w; 
//   v1.x <- input.Normal.x; v1.y <- input.Normal.y; v1.z <- input.Normal.z; 
//   v2.x <- input.Tex.x; v2.y <- input.Tex.y; 
//   v3.x <- input.Color.x; v3.y <- input.Color.y; v3.z <- input.Color.z; v3.w <- input.Color.w; 
//   v4.x <- input.wNormal.x; v4.y <- input.wNormal.y; v4.z <- input.wNormal.z; 
//   v5.x <- input.wPos.x; v5.y <- input.wPos.y; v5.z <- input.wPos.z; 
//   o3.x <- <main return value>.depth.x; o3.y <- <main return value>.depth.y; o3.z <- <main return value>.depth.z; o3.w <- <main return value>.depth.w; 
//   o2.x <- <main return value>.position.x; o2.y <- <main return value>.position.y; o2.z <- <main return value>.position.z; o2.w <- <main return value>.position.w; 
//   o1.x <- <main return value>.normal.x; o1.y <- <main return value>.normal.y; o1.z <- <main return value>.normal.z; o1.w <- <main return value>.normal.w; 
//   o0.x <- <main return value>.color.x; o0.y <- <main return value>.color.y; o0.z <- <main return value>.color.z; o0.w <- <main return value>.color.w
//
#line 10 "D:\学習\C言語\2年授業\描画エンジン開発\?E人製?Eptr改造)precompi"
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v2.xyxx, t0.xyzw, s0  // r0.x <- c.x; r0.y <- c.y; r0.z <- c.z; r0.w <- c.w
dp3 r1.x, v4.xyzx, v4.xyzx
rsq r1.x, r1.x
mul r1.xyz, r1.xxxx, v4.xyzx  // r1.x <- n.x; r1.y <- n.y; r1.z <- n.z
mov r1.w, l(1.000000)  // r1.w <- n.w
mov r2.x, v0.z  // r2.x <- d.x
mov r2.yzw, l(0,0,0,1.000000)  // r2.y <- d.y; r2.z <- d.z; r2.w <- d.w
mov r3.xyz, v5.xyzx  // r3.x <- p.x; r3.y <- p.y; r3.z <- p.z
mov r3.w, l(1.000000)  // r3.w <- p.w
mov r0.xyzw, r0.xyzw  // r0.x <- output.color.x; r0.y <- output.color.y; r0.z <- output.color.z; r0.w <- output.color.w
mov r1.xyzw, r1.xyzw  // r1.x <- output.normal.x; r1.y <- output.normal.y; r1.z <- output.normal.z; r1.w <- output.normal.w
mov r3.xyzw, r3.xyzw  // r3.x <- output.position.x; r3.y <- output.position.y; r3.z <- output.position.z; r3.w <- output.position.w
mov r2.xyzw, r2.xyzw  // r2.x <- output.depth.x; r2.y <- output.depth.y; r2.z <- output.depth.z; r2.w <- output.depth.w
mov o0.xyzw, r0.xyzw
mov o1.xyzw, r1.xyzw
mov o2.xyzw, r3.xyzw
mov o3.xyzw, r2.xyzw
ret 
// Approximately 18 instruction slots used
